// Code generated by go-bindata.
// sources:
// content.opf
// cover.html
// part.html
// story.css
// toc.ncx
// DO NOT EDIT!

package ebooks

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _contentOpf = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x92\x51\x8b\xdc\x20\x14\x85\xdf\xf7\x57\x04\xdf\x37\xce\xee\x4b\x21\x24\x81\x29\x4b\x61\x1f\x0a\x85\xe9\x3c\x17\x47\x6f\x26\x97\x31\x6a\xf5\xda\x29\x84\xfc\xf7\xa2\x71\x26\x1d\x68\xd9\x37\x3d\xe7\xdc\x4f\x3d\xd8\x3a\x21\x2f\xe2\x0c\xd5\xef\x49\x9b\xd0\xb1\x91\xc8\x35\x9c\x5f\xaf\xd7\x1a\x95\x1b\x6a\xeb\xcf\xfc\x75\xb7\xfb\xc4\xad\x1b\x58\x15\x0d\xfe\x8c\xf0\x8c\x0a\x0c\xe1\x80\xe0\x3b\xf6\xd9\xda\xcb\xbb\x62\xd5\x2f\xf0\x01\xad\xe9\xd8\x6b\xbd\x63\xfd\x53\x3b\x01\x09\x25\x48\xac\xe0\x46\xc9\x3b\xdb\x45\xaf\x33\x57\x49\x0e\x1a\x26\x30\x14\xf8\x4b\xfd\xc2\x59\xc9\x5a\x37\x7c\x70\x91\xfe\xa9\x55\xb2\x91\x1e\x04\x59\x5f\x59\x37\x34\xde\x6a\xe8\x98\x88\xc4\xf2\x76\x40\x0d\xcf\x22\x74\x6c\x9e\xeb\x7d\xa4\xd1\xfa\x2f\xa8\x61\x1f\x96\x85\xf5\x77\x69\x59\x5a\xbe\x61\x56\xe6\xf6\xb4\x0a\xd5\xf6\xba\xc4\x0c\x72\x84\x09\x3a\x76\x3c\xbe\xbf\xb1\x3e\x7a\xd3\xc4\x88\xaa\x99\xe7\x3a\x29\x05\xb6\xcd\xaf\x3c\x25\x08\xd2\x89\x6f\x82\xa0\x44\xb2\x94\x4d\x42\xd2\xd9\xfd\x9e\x16\xc5\x5e\xc5\xec\xbb\x78\xd2\x18\x46\xf0\x29\xf3\xed\xb6\x29\xb9\xcd\x5c\xcb\xae\x8c\x48\xb7\x93\x42\xe3\xc9\xc3\x8a\xf9\x11\xac\x27\x56\x49\x6b\x08\x0c\xe5\x36\xf2\x51\xf7\x32\xf8\xbf\x87\x03\x78\x84\xf0\x38\x78\xc8\x5a\x99\x79\x6c\xea\xef\x76\x0a\x22\xd7\xfc\xbf\x5e\xf8\xed\x73\xa4\xd0\x57\x61\x70\x80\x40\x7b\xa3\x0e\x0e\x4d\xaa\xe1\x1c\x51\x01\xef\x5b\x5e\x3e\x67\xff\x27\x00\x00\xff\xff\x57\x39\xc6\xde\xa6\x02\x00\x00"

func contentOpfBytes() ([]byte, error) {
	return bindataRead(
		_contentOpf,
		"content.opf",
	)
}

func contentOpf() (*asset, error) {
	bytes, err := contentOpfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "content.opf", size: 678, mode: os.FileMode(420), modTime: time.Unix(1476255196, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _coverHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x8d\x4d\x4f\xc3\x30\x0c\x86\xef\xf9\x15\x26\xf7\xc6\x8a\x76\xa1\xe0\xe6\x40\x3b\x09\xa4\x01\x13\x0a\x02\x8e\x65\x35\x74\x52\x3f\xc6\xe6\xd1\x4e\x53\xff\x3b\x4a\x0a\x37\x7c\xb1\x5f\xe9\x7d\x1e\xd3\x45\xf1\x98\xfb\xb7\xf5\x12\x6a\x69\x1b\x58\x3f\xdf\xac\xee\x72\xd0\x09\xe2\xcb\x22\x47\x2c\x7c\x01\xaf\xb7\xfe\x7e\x05\xd6\x58\xc4\xe5\x83\x56\xf0\x3b\xba\x16\xd9\x5d\x21\x0e\xc3\x60\x86\x85\xe9\xf7\x9f\xe8\x9f\x70\x0c\x1a\x6b\x03\xf8\x77\x9b\x4a\x2a\xed\x14\xc5\x07\x63\xdb\x74\x87\xec\x1f\xd6\xa6\x69\x3a\x13\xb1\xcb\x65\xe5\x14\xb5\x2c\x25\x84\x6e\xc2\x5f\xc7\xed\x77\xa6\xf3\xbe\x13\xee\x24\xf1\xa7\x1d\x6b\xd8\xcc\x29\xd3\xc2\xa3\x60\x60\xaf\x61\x53\x97\xfb\x03\x4b\x76\x94\x8f\xe4\x52\xa3\x53\x24\x5b\x69\xd8\x11\xce\x5b\x11\x46\x39\xbd\xf7\xd5\xc9\xa9\xf3\xd9\x4c\x93\x22\x8c\x89\xa2\xc3\xa9\x9f\x00\x00\x00\xff\xff\xde\x87\x7a\x3d\x15\x01\x00\x00"

func coverHtmlBytes() ([]byte, error) {
	return bindataRead(
		_coverHtml,
		"cover.html",
	)
}

func coverHtml() (*asset, error) {
	bytes, err := coverHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cover.html", size: 277, mode: os.FileMode(420), modTime: time.Unix(1476255196, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _partHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x8f\xc1\x8e\x9b\x30\x10\x86\xef\x3c\x85\xeb\x3b\x1e\xa1\x5c\x9a\xd4\x70\x08\x49\xd5\x4a\x69\x1b\x35\xac\x76\xf7\x48\x60\x02\x28\x06\xb3\xf6\x64\x09\x42\xbc\xfb\xca\x4e\x22\xed\x61\x7d\x1a\x8f\xfe\xef\xb3\x7f\xf9\x6d\xf3\x2f\xcd\x5e\xf7\x5b\x56\x53\xab\xd8\xfe\x69\xbd\xfb\x9d\x32\x1e\x02\x3c\x2f\x52\x80\x4d\xb6\x61\x2f\xbf\xb2\x3f\x3b\x16\x89\x08\x60\xfb\x97\x07\xec\x7e\x78\x4d\xd4\xaf\x00\x86\x61\x10\xc3\x42\x68\x53\x41\xf6\x1f\xae\x4e\x13\x45\x0e\x7c\xcc\xa2\xa4\x92\x27\x81\xf4\x0f\x5c\x5b\xd5\xd9\xf8\x0b\x36\x5a\x2e\x97\x37\xc2\x67\x31\x2f\x93\x40\xb6\x48\x39\x73\xd9\x10\xdf\x2e\xcd\x7b\xcc\x53\xdd\x11\x76\x14\x66\x63\x8f\x9c\x15\xb7\x5b\xcc\x09\xaf\x04\x8e\xfd\xc1\x8a\x3a\x37\x16\x29\xbe\xd0\x29\xfc\xce\xe1\x21\xe9\xf2\x16\x63\x5e\x61\x87\x26\x27\x6d\x3e\xb1\x4e\x6f\x57\x00\x55\x43\xf5\xe5\x28\x0a\xdd\x82\x69\xce\x4d\x57\xc1\x50\xe7\x84\x0a\xc7\x10\x8f\x5a\x9f\xad\x97\x51\x43\x0a\x93\x69\x12\x99\x1b\xe6\x59\xc2\x6d\x13\x48\xd5\x74\x67\x56\x1b\x3c\xc5\x5c\x08\x38\xd0\xa8\xd0\x82\x25\x6d\x46\x51\x58\xcb\x99\x41\x15\x73\xeb\xd7\x35\x22\x71\x46\x63\x8f\xf7\xaf\xfb\x80\xd3\x83\x2f\x2e\x8f\xba\x1c\x93\x60\x9a\xc4\xc1\xf1\x6b\x5d\x8e\x3f\xb5\xc9\xb0\xed\x55\x4e\x38\xcf\x81\x04\x9f\x90\xbe\x73\x12\x7c\x04\x00\x00\xff\xff\xee\x44\xb4\xe3\xc5\x01\x00\x00"

func partHtmlBytes() ([]byte, error) {
	return bindataRead(
		_partHtml,
		"part.html",
	)
}

func partHtml() (*asset, error) {
	bytes, err := partHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "part.html", size: 453, mode: os.FileMode(420), modTime: time.Unix(1477167607, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _storyCss = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x54\xc1\x6e\xe3\x36\x10\x3d\xaf\xbe\x62\xba\x8b\x00\xed\x22\x96\xb5\x76\xe3\xdd\x2a\xc7\x14\x2e\x82\x22\x69\x0f\x05\x82\x1e\x29\x72\x24\x4d\x43\x91\x04\x45\xc7\x76\x02\xff\x7b\x41\x51\xb2\x24\x5b\x69\xd2\xf5\x25\xd0\x9b\xe8\xcd\x7b\x33\x6f\x94\x69\xb1\x87\x97\x08\x00\xa0\x62\xbb\xd9\x96\x84\x2b\xd3\xab\x04\xab\xeb\x16\xb3\x05\xa9\x99\xc4\xdc\xa5\x6c\xe3\xf4\x08\xb5\x54\x94\x1d\x7c\x88\x4c\x4b\xe3\x70\xe7\x66\xa4\x04\x2a\x97\x42\x7c\x45\xca\x17\xa9\x2a\xda\x72\xe8\x00\x5f\x92\xe4\x02\x7e\xa0\xca\x68\xeb\x98\x72\x81\xb7\xc4\x86\x11\x3c\xe5\x59\x31\x34\xf5\x6f\x9a\x1d\x24\x9e\x34\x8a\xe5\xde\x12\xaf\x2f\x61\xfe\x19\x7e\x67\x7b\xc1\xe0\xf3\x1c\x62\x61\x91\x55\x47\x4f\xbd\x7e\x48\x82\x9a\x33\x07\xc3\xc2\x48\xfd\x29\xce\x24\x15\x2a\x05\xcf\xd6\xf4\x1f\xb4\x8d\x46\x6d\x73\xad\xdc\xac\x76\x7b\x89\x29\x90\x63\x92\x78\xd0\xbb\x2d\x99\xa3\x7c\x26\xa8\xe6\x92\x51\x85\x16\x5e\xa2\x0f\xfd\xdc\xe1\x5b\x72\x71\x1d\x7d\x08\x6f\xd3\x33\xb6\x80\x7f\x33\xa3\x67\xce\xac\xf8\x0f\x7e\x8f\x67\x8c\x3f\x16\x56\x6f\x94\x98\x71\x2d\xb5\x4d\xe1\x93\x10\x22\xd4\x3a\x60\xb1\x58\x9c\x5b\xe2\xa8\x1c\xda\x80\x3f\xa1\x75\xc4\x99\xec\x6a\x19\xab\x51\x92\xc2\xf1\x1a\xae\xcc\x2e\x00\x86\x09\x41\xaa\x18\x20\x99\xb6\x02\xad\x1f\xdf\x17\x52\x50\x6b\x49\x02\x3e\xad\xd7\x49\x92\x24\x67\x32\x8d\xae\xc9\x91\x3e\x91\xc0\x25\x32\x9b\x42\xa6\x5d\x19\x80\x5c\x6a\xe6\x52\x50\xda\xcb\x08\x93\x47\x25\xc0\xe2\x13\xe1\x16\x05\x34\xb3\xa8\xfd\x1e\xa2\xf8\x01\x33\xe6\x1d\x48\x6c\xa7\xd5\x39\x5f\x37\xbf\x57\x27\x95\x24\xab\x55\xa7\xb0\xcd\x87\xd3\x26\xa4\x71\x2a\x35\xdf\x2e\xce\x6f\xe4\x08\x76\x33\x70\x65\x3f\x82\x5f\x9a\x5f\xd8\xe7\x9f\x37\x35\xb7\x88\x6a\xb8\xd0\x9c\x55\x24\xf7\x29\x7c\xbc\xd1\x1b\x4b\x68\xe1\x1e\xb7\x1f\x2f\xa1\x7d\xba\x84\x4a\x2b\x5d\x1b\xc6\xf1\xfa\xff\xd9\xea\x07\x3f\x92\x1a\xff\x3c\x7d\x0d\x3d\x7e\x5c\xad\x5f\xe4\xd8\xd7\xc2\xec\x3a\x5b\x2c\x67\xf9\x57\x3e\xc8\x94\x40\xae\x2d\x0b\x5b\xed\x36\x16\xdf\xa3\x6b\xbd\x4e\x68\x5c\x2e\x93\xe4\x68\x61\xd0\x41\xe8\x4d\x26\xd1\x7b\xe8\x2d\x9e\xda\x3e\x44\xf1\x9a\x2c\x6e\xb5\x7d\xac\xcf\x3b\x50\xc5\x0a\x4c\x61\x63\xe5\x8f\x71\x3c\xbf\xf5\x4f\xf5\x3c\x6f\xff\x7f\xf1\x35\x2e\x28\xff\xe9\xcd\x50\x1e\xb3\xe9\x37\x57\x22\x13\xa2\xb9\xdc\xd7\x8e\xa8\x71\xbb\xad\xb9\x24\x63\x48\x15\xe3\x4f\x51\x3b\xe4\xe5\x54\x78\x96\xef\x08\x8f\x67\x7f\x60\x56\x91\x2a\xfe\x46\x29\xf5\x76\x22\xe4\x13\x77\xd6\x97\x43\x1a\x0e\x51\x7c\x77\xfb\xeb\xf8\x9b\xbc\x4c\x0c\x9f\x38\xb7\xc1\x41\xf6\x40\x27\xb1\x55\xb7\x5a\xad\x3c\xe7\x5d\xcf\xf9\x3d\x89\x9e\xd0\xbb\x5a\x0d\xc2\x7d\xda\xf3\x18\x80\xbf\xfe\xb8\xff\xed\x9d\xbb\x37\xcc\xa0\x8d\xff\x31\xc5\xf9\xda\x2d\x1a\xf4\xb6\xc3\xdf\x86\xd8\x30\xcb\xcb\x0a\xd5\x44\x76\xdf\x64\x3f\x44\xb1\x35\xc4\xdd\xc6\x76\x1f\xa2\x76\xac\x4d\x04\x7c\xfd\xdf\x00\x00\x00\xff\xff\xfb\x75\x4f\x69\x7d\x07\x00\x00"

func storyCssBytes() ([]byte, error) {
	return bindataRead(
		_storyCss,
		"story.css",
	)
}

func storyCss() (*asset, error) {
	bytes, err := storyCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "story.css", size: 1917, mode: os.FileMode(420), modTime: time.Unix(1485325998, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tocNcx = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\xd0\xc1\x4a\xc4\x30\x10\x80\xe1\x7b\x9f\xa2\xe4\x6e\xa6\x2a\x8a\x96\x34\x17\xbd\x78\x70\xf1\xe0\x3e\x40\xb6\x19\xb6\x81\x66\x52\xda\xc9\x36\x1a\xf2\xee\xd2\x45\x44\xd8\xc3\x1e\xe7\xe7\x1b\x18\x46\x51\x9f\xea\xe4\x47\x5a\x3a\x31\x30\x4f\x2d\xc0\xba\xae\xd2\x1a\xb7\x7c\xc9\x30\x1f\xe1\xfb\xfe\xf9\xe9\x11\xee\x9a\xe6\x01\xa8\x4f\x20\xea\x13\xce\x8b\x0b\xd4\x89\xad\xdd\xdc\x0a\x5d\xa9\x01\x8d\xd5\x95\xf2\xc8\xa6\xee\x03\x31\x12\x77\x22\xce\xd4\xc6\xe8\x6c\x9b\xb3\xdc\xef\xdf\x5e\x4b\x11\x35\x19\x8f\x9d\xb0\x7c\x68\xa3\xb3\x02\x2e\x76\x9a\xff\xc4\xe2\xc4\xc3\x35\xc4\x81\xcd\xf8\x61\x8e\xf8\x12\x22\xf1\x35\xed\x4d\xda\xec\x2e\xfa\x03\xce\x02\xb4\x82\xdf\xd3\x6d\xe8\x3f\x1d\x8f\xa8\x15\x63\x62\x9d\xb3\x3c\x8f\xa5\x28\x38\x07\x05\x7f\xa2\xca\x59\xee\xcc\xe9\xdd\x4c\xa5\x54\x6a\x7b\x8a\xfe\x09\x00\x00\xff\xff\xf6\x95\x75\xd6\x45\x01\x00\x00"

func tocNcxBytes() ([]byte, error) {
	return bindataRead(
		_tocNcx,
		"toc.ncx",
	)
}

func tocNcx() (*asset, error) {
	bytes, err := tocNcxBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "toc.ncx", size: 325, mode: os.FileMode(420), modTime: time.Unix(1476255196, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"content.opf": contentOpf,
	"cover.html":  coverHtml,
	"part.html":   partHtml,
	"story.css":   storyCss,
	"toc.ncx":     tocNcx,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"content.opf": &bintree{contentOpf, map[string]*bintree{}},
	"cover.html":  &bintree{coverHtml, map[string]*bintree{}},
	"part.html":   &bintree{partHtml, map[string]*bintree{}},
	"story.css":   &bintree{storyCss, map[string]*bintree{}},
	"toc.ncx":     &bintree{tocNcx, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
