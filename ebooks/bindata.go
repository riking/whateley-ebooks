// Code generated by go-bindata.
// sources:
// content.opf
// about.html
// cover.html
// part.html
// story.css
// toc.ncx
// DO NOT EDIT!

package ebooks

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _contentOpf = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\x41\x8b\xdb\x30\x10\x85\xef\xf9\x15\x46\xf7\xb5\xb2\x7b\x29\x18\xdb\x34\x65\x29\xdd\x43\xa1\xb0\xcd\xb9\x28\xd2\x38\x1e\x22\x4b\xaa\x34\xaa\x5b\x8c\xff\x7b\x91\xec\xc4\x0d\x6d\xd9\x9b\x67\xe6\xbd\x4f\xa3\x67\xd5\x4e\xc8\x8b\x38\x43\xf1\x73\xd0\x26\x34\xac\x27\x72\x15\xe7\xe3\x38\x96\xa8\x5c\x57\x5a\x7f\xe6\x4f\xfb\xfd\x3b\x6e\x5d\xc7\x8a\x68\xf0\x7b\x84\x07\x54\x60\x08\x3b\x04\xdf\xb0\x0f\xd6\x5e\x5e\x14\x2b\x7e\x80\x0f\x68\x4d\xc3\x9e\xca\x3d\x6b\x77\xf5\x00\x24\x94\x20\xb1\x80\x2b\x25\x6f\x6c\x17\xbd\xce\x5c\x25\x39\x68\x18\xc0\x50\xe0\x8f\xe5\x23\x67\xab\xd6\xba\xee\x8d\x45\xda\x5d\xad\x64\x25\x3d\x08\xb2\xbe\xb0\xae\xab\xbc\xd5\xd0\x30\x11\x89\xe5\xb2\x43\x0d\x0f\x22\x34\x6c\x9a\xca\x43\xa4\xde\xfa\x8f\xa8\xe1\x10\xe6\x99\xb5\xb7\xd6\x3c\xd7\x7c\xc3\x2c\xcc\xed\x6a\x05\xaa\xed\x76\x89\x19\x64\x0f\x03\x34\xec\x78\x7c\x79\x66\x6d\xf4\xa6\x8a\x11\x55\x35\x4d\x65\xea\xac\xb0\xcd\xbf\xf0\x94\x20\x48\x27\x3e\x0b\x82\x55\x92\x5b\x79\x48\x48\x3a\x4f\xbf\xa6\x8f\x75\xbc\x34\xf3\xdc\xc5\x93\xc6\xd0\x83\x4f\x9a\x2f\xd7\x62\xd5\x6d\xc3\x25\xec\xc2\x88\xb4\x9d\x14\x1a\x4f\x1e\x16\xcc\xb7\x60\x3d\xb1\x42\x5a\x43\x60\x28\xa7\x91\x8f\xba\x85\xc1\xff\x6d\x0e\xe0\x11\xc2\xbd\xf1\x35\xf7\xfe\xf6\x8c\xbd\x20\xd0\xf0\x0b\x4e\xd6\x5e\xc2\x35\xcd\x7b\xef\x31\x80\x4f\xea\x79\x7e\x3f\x4d\xe5\x27\x1b\x68\xa9\x32\xeb\x3e\xf5\x3f\x93\x5e\xd7\xc9\xbf\xec\x7f\x19\xf3\xeb\x43\x4b\xa2\xcf\xc2\x60\x07\x81\x0e\x46\xbd\x3a\x34\x29\xd2\x73\x44\x05\xbc\xad\xf9\xfa\xd0\xdb\xdd\xef\x00\x00\x00\xff\xff\x04\xd6\x4b\x8d\xf3\x02\x00\x00"

func contentOpfBytes() ([]byte, error) {
	return bindataRead(
		_contentOpf,
		"content.opf",
	)
}

func contentOpf() (*asset, error) {
	bytes, err := contentOpfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "content.opf", size: 755, mode: os.FileMode(420), modTime: time.Unix(1533332351, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _aboutHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\xc1\x6e\xe3\x36\x10\x3d\x47\x5f\x31\xd5\xa9\x05\x6c\x11\x46\x2e\xcd\x56\x11\xba\x6b\x07\x48\x80\xdd\x36\x28\xb4\xd8\xf6\x48\x89\x23\x93\x08\xc5\xd1\x92\xa3\xc8\x82\xa1\x7f\x2f\x48\x79\x93\x06\x2d\x8a\xf5\x85\x1e\xcf\xbc\x99\xf7\x1e\x87\x2e\x7f\x38\xfc\xbe\xaf\xff\x7a\xbc\x03\xcd\xbd\x85\xc7\xcf\x1f\x3e\x3e\xec\x21\xdf\x0a\xf1\xe5\x7a\x2f\xc4\xa1\x3e\xc0\x9f\xf7\xf5\xa7\x8f\xb0\x2b\x76\x42\xdc\xfd\x96\x67\x70\xf9\xe4\x9a\x79\x78\x27\xc4\x34\x4d\xc5\x74\x5d\x90\x3f\x8a\xfa\x0f\x71\x8a\x6d\x76\xbb\x08\xfc\xf6\xbd\x50\xac\xf2\x2a\x2b\xd3\x80\x53\x6f\x5d\xb8\xfd\x0f\xec\xee\xe6\xe6\x66\x45\xa4\x5a\x94\xaa\xca\xca\x1e\x59\x42\xac\xdd\xe2\xd7\xd1\x3c\xdf\xe6\x7b\x72\x8c\x8e\xb7\xf5\x3c\x60\x0e\xed\x1a\xdd\xe6\x8c\x27\x16\x11\xfb\x0b\xb4\x5a\xfa\x80\x7c\x3b\x72\xb7\xfd\x39\x17\x55\x56\xb2\x61\x8b\x55\x29\xd6\x33\x2b\x45\x6a\x5e\x36\xa4\xe6\x2a\xbb\x2a\xf5\xae\x3a\x9f\x8b\x3a\x26\x97\xa5\x14\x7a\x97\x7e\xbc\xae\x9a\x19\xce\xe7\xe2\xfd\xc8\x9a\x7c\x4a\x5c\x5f\x12\xc3\xd8\x58\x13\x34\x2a\x58\x4b\x1e\x2f\xf1\x3f\xab\xbc\x88\xc7\x50\x95\xd8\x57\xb5\x36\x01\x26\xf2\x4f\x60\x02\xb4\x34\xcc\xde\x1c\x35\xaf\x70\xd6\x08\x32\x8d\x08\x1b\x98\x0c\x6b\x28\x25\x68\x8f\xdd\xab\x45\x5a\x32\x5a\x9c\x65\x2b\x15\xf6\x73\xe1\x90\x85\x71\x0a\x4f\xc5\xa0\x07\xd1\xc9\xaf\x5b\x8d\x76\x10\xbb\x9b\xed\x4b\xeb\xbc\xc2\x53\x6b\xc7\x60\x9e\x11\x94\x09\xec\x4d\x33\xb2\x21\x07\x29\x1b\x4a\x21\x2b\xd0\x68\x5f\x08\x7c\xb9\x8c\x80\xf7\xeb\x0c\x98\xb0\x09\x86\x11\x7e\x1c\x9d\xc5\x10\xc0\x38\x65\x5a\x19\x29\x13\x6b\xf4\x93\x09\xf8\x53\x91\x5d\x25\x61\x77\xdb\x0f\x44\x4f\xd0\x19\x8b\x30\xc9\x00\xad\xc7\x54\x99\xc4\xc8\xb7\x72\xc2\x3b\x21\x8e\x86\xf5\xd8\x14\x2d\xf5\xc2\x9b\x27\xe3\x8e\x2f\x0a\xb7\xd8\x10\x3d\x85\xbc\x62\x22\x9b\x48\x4e\xde\x30\xa3\x8b\x3c\x4b\x81\x7d\xb5\x02\xa2\xa7\x20\x9d\x7a\xd5\x86\x0a\x3a\xf2\xd0\x79\xc4\x22\xbb\x7a\xe8\x60\xa6\x11\x06\x69\x14\xf4\xe4\x70\x4e\x49\x8e\x64\x23\xcb\x0d\x90\x07\x8f\x2d\x9a\x67\x54\x60\x18\x3a\x4f\x3d\x04\xea\x91\x1c\x6e\x12\x54\x7a\x04\x09\xcf\xa6\x65\xd3\x03\x75\xaf\x97\x06\x9d\x97\xa3\x2a\xb2\xab\x03\x5a\x64\x4c\xee\x25\xe5\x91\xce\xaa\x3c\x36\xf0\x40\x93\x4b\x28\x18\x83\x71\xc7\x54\x17\x55\x15\x49\x46\x29\x86\x75\x3b\x6a\x8d\xa0\xa9\xc7\x41\x1e\x31\xce\xf9\xd7\x45\x98\x90\xa0\xf9\xde\xcf\x81\xa5\x85\x7b\x69\xed\x26\x07\xc9\xdf\xb5\x26\x79\xf5\x3f\xc9\x68\xf0\x06\x26\x8d\x3e\x51\x86\x56\x3a\xf0\x28\x55\x1c\x18\x10\x02\x93\x37\x18\xaf\x1e\x64\xdc\x07\x68\x3c\x4d\x01\xfd\xab\xd1\x17\x15\x2f\xab\x5e\x7f\x33\xf8\xcd\x1a\x90\x8b\x4f\xe4\x20\x19\x97\xe5\xf2\x5e\x3e\x07\xf4\x4e\xf6\xb8\x2c\xbf\x9e\xcf\xc5\x3d\x05\x5e\xa3\x0d\xf4\xb2\xd5\xc6\x21\x3c\x1c\x62\xdd\xa7\x35\x7a\x38\x2c\x4b\xf2\xb7\x97\x33\x38\x62\x68\x10\xd8\x4b\x17\x3a\xf4\x1e\x15\x30\xad\x5b\x09\x03\xd2\x60\x2f\xbc\x4a\x91\x9e\x77\x99\xfe\x14\xaa\xec\xef\x00\x00\x00\xff\xff\xc3\x56\x0b\xd6\xe6\x04\x00\x00"

func aboutHtmlBytes() ([]byte, error) {
	return bindataRead(
		_aboutHtml,
		"about.html",
	)
}

func aboutHtml() (*asset, error) {
	bytes, err := aboutHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "about.html", size: 1254, mode: os.FileMode(420), modTime: time.Unix(1533332606, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _coverHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8d\x4d\x4f\xc3\x30\x0c\x86\xef\xf9\x15\x26\xf7\xc6\x8a\x76\xa1\xe0\xe6\x40\x3b\x09\xa4\x01\x13\x0a\x02\x8e\x65\x35\x74\x52\x3f\xc6\xe6\xd1\x4e\x53\xff\x3b\x4a\x0a\x37\x7c\xb1\x5f\xe9\x7d\x1e\xd3\x45\xf1\x98\xfb\xb7\xf5\x12\x6a\x69\x1b\x58\x3f\xdf\xac\xee\x72\xd0\x09\xe2\xcb\x22\x47\x2c\x7c\x01\xaf\xb7\xfe\x7e\x05\xd6\x58\xc4\xe5\x83\x56\xf0\x3b\xba\x16\xd9\x5d\x21\x0e\xc3\x60\x86\x85\xe9\xf7\x9f\xe8\x9f\x70\x0c\x1a\x6b\x03\xf8\x77\x9b\x4a\x2a\xed\x14\xc5\x07\x63\xdb\x74\x87\xec\x1f\xd6\xa6\x69\x3a\x13\xb1\xcb\x65\xe5\x14\xb5\x2c\x25\x84\x6e\xc2\x5f\xc7\xed\x77\xa6\xf3\xbe\x13\xee\x24\xf1\xa7\x1d\x6b\xd8\xcc\x29\xd3\xc2\xa3\x60\x60\xaf\x61\x53\x97\xfb\x03\x4b\x76\x94\x8f\xe4\x52\xa3\x53\x24\x5b\x69\xd8\x11\xce\x5b\x11\x46\x39\xbd\xf7\xd5\xc9\xa9\xf3\xd9\x4c\x93\x22\x8c\x89\xa2\xc3\xa9\x9f\x00\x00\x00\xff\xff\xde\x87\x7a\x3d\x15\x01\x00\x00"

func coverHtmlBytes() ([]byte, error) {
	return bindataRead(
		_coverHtml,
		"cover.html",
	)
}

func coverHtml() (*asset, error) {
	bytes, err := coverHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cover.html", size: 277, mode: os.FileMode(420), modTime: time.Unix(1533325117, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _partHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xc1\x8e\x9b\x30\x10\x86\xef\x3c\x85\xeb\x3b\x1e\xa1\x5c\x9a\xd4\x70\x08\x49\xd5\x4a\x69\x1b\x35\xac\x76\xf7\x48\x60\x02\x28\x06\xb3\xf6\x64\x09\x42\xbc\xfb\xca\x4e\x22\xed\x61\x7d\x1a\x8f\xfe\xef\xb3\x7f\xf9\x6d\xf3\x2f\xcd\x5e\xf7\x5b\x56\x53\xab\xd8\xfe\x69\xbd\xfb\x9d\x32\x1e\x02\x3c\x2f\x52\x80\x4d\xb6\x61\x2f\xbf\xb2\x3f\x3b\x16\x89\x08\x60\xfb\x97\x07\xec\x7e\x78\x4d\xd4\xaf\x00\x86\x61\x10\xc3\x42\x68\x53\x41\xf6\x1f\xae\x4e\x13\x45\x0e\x7c\xcc\xa2\xa4\x92\x27\x81\xf4\x0f\x5c\x5b\xd5\xd9\xf8\x0b\x36\x5a\x2e\x97\x37\xc2\x67\x31\x2f\x93\x40\xb6\x48\x39\x73\xd9\x10\xdf\x2e\xcd\x7b\xcc\x53\xdd\x11\x76\x14\x66\x63\x8f\x9c\x15\xb7\x5b\xcc\x09\xaf\x04\x8e\xfd\xc1\x8a\x3a\x37\x16\x29\xbe\xd0\x29\xfc\xce\xe1\x21\xe9\xf2\x16\x63\x5e\x61\x87\x26\x27\x6d\x3e\xb1\x4e\x6f\x57\x00\x55\x43\xf5\xe5\x28\x0a\xdd\x82\x69\xce\x4d\x57\xc1\x50\xe7\x84\x0a\xc7\x10\x8f\x5a\x9f\xad\x97\x51\x43\x0a\x93\x69\x12\x99\x1b\xe6\x59\xc2\x6d\x13\x48\xd5\x74\x67\x56\x1b\x3c\xc5\x5c\x08\x38\xd0\xa8\xd0\x82\x25\x6d\x46\x51\x58\xcb\x99\x41\x15\x73\xeb\xd7\x35\x22\x71\x46\x63\x8f\xf7\xaf\xfb\x80\xd3\x83\x2f\x2e\x8f\xba\x1c\x93\x60\x9a\xc4\xc1\xf1\x6b\x5d\x8e\x3f\xb5\xc9\xb0\xed\x55\x4e\x38\xcf\x81\x04\x9f\x90\xbe\x73\x12\x7c\x04\x00\x00\xff\xff\xee\x44\xb4\xe3\xc5\x01\x00\x00"

func partHtmlBytes() ([]byte, error) {
	return bindataRead(
		_partHtml,
		"part.html",
	)
}

func partHtml() (*asset, error) {
	bytes, err := partHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "part.html", size: 453, mode: os.FileMode(420), modTime: time.Unix(1533325117, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _storyCss = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\x4d\x8f\xdb\x36\x10\x3d\x47\xbf\x62\x9a\xc5\x02\xad\x61\xcb\x8a\xb7\xab\x64\x95\x63\x0a\x17\x41\x91\x6d\x0f\x05\x82\x1e\x47\xe2\x48\x62\x96\x22\x89\x21\xbd\xb6\x13\xf8\xbf\x17\x14\x25\x7f\x6f\x13\xd4\x17\x43\x6f\xc8\x37\x1f\xef\x0d\xe7\x13\xa8\x78\xeb\x3c\xaa\x16\x95\x02\xe7\xb7\x8a\xdc\x14\x50\xa0\xf5\x24\xa0\x36\x0c\x54\x1a\xf3\x04\x4c\x28\x88\x1d\x4c\xe6\xc9\x7c\x02\x9d\x71\x5e\x6d\xa7\x50\x19\x65\xd8\x41\x8b\xcf\x04\x25\x91\x06\xa6\xce\x3c\x93\x00\xc3\x80\xe2\xcb\xca\x05\x92\xc9\x3c\x49\x4a\x23\xb6\xf0\x2d\x01\x00\xe8\x70\x33\x5b\x4b\xe1\xdb\xe2\x3e\xa3\xee\xfd\x80\x71\x23\xf5\x4c\x51\xed\x0b\x5c\x79\x73\x82\xb2\x6c\xda\x11\xde\x25\x76\xa0\xf1\xb4\xf1\x33\xa9\x05\x69\x5f\x40\x7a\x2f\x75\x08\xca\xae\x19\xc2\x31\x03\xbc\xc9\xb2\x5b\xf8\x49\x76\xd6\xb0\x47\xed\x23\x6f\x4b\x3d\x23\x04\xca\x8b\x60\x4c\x1a\x6e\xda\x0d\x64\x81\x34\x49\xd5\x96\x65\xe5\xa6\x30\x9f\xc0\x1f\xb8\x15\x08\x93\x39\xa4\x82\x09\xbb\x7d\x4f\x87\xfa\x21\x8b\xd5\x5c\x74\x70\x1c\x38\xa9\xfe\x1c\x47\x25\x1b\x5d\x40\x60\xeb\xf3\x1f\xa5\x4d\x4e\xd2\xd6\x46\xfb\x59\xaf\x59\x01\xd2\xa3\x92\x55\xac\x77\xdd\xa2\x97\xf5\x4c\x48\x57\x29\x94\x1d\x31\x7c\x4b\x5e\x1d\xe6\x0e\xef\xb2\xdb\xf7\xc9\xab\x78\x5b\x7e\xa5\x01\x08\x37\x4b\xf9\xb5\x42\x16\xff\xc1\x1f\xf0\x12\xab\xa7\x86\xcd\x4a\x8b\x59\xef\x80\x02\x6e\x84\x10\x31\x36\x02\x8b\xc5\xe2\xb2\xa5\x8a\xb4\x27\x8e\xf8\x33\xb1\x97\x15\xaa\x31\x56\xa2\x23\x25\x35\x9d\xca\x70\x6f\x37\x11\xb0\x28\x84\xd4\xcd\x11\x52\x1a\x16\xc4\x61\x7c\x6f\xa4\x06\x67\x94\x14\x70\xb3\x5c\x66\x59\x96\x5d\x94\x69\x8d\x93\x5e\x9a\xb3\x12\x2a\x45\xc8\x05\x94\xc6\xb7\x11\xa8\x95\x41\x5f\x80\x36\xa1\x8c\x5d\x92\x3e\x92\x1f\x46\x71\xa5\xe5\xbb\xbb\x2c\x5b\x2e\x4f\x6b\x59\xd8\x0d\x08\xb3\x2a\x15\xc1\x4d\x88\x8e\xf1\xf1\xce\x72\x19\xb1\x5d\x92\xb6\x84\x42\xf4\xd2\xbc\x34\xa5\x28\x3d\x69\x01\x4c\xcf\x92\xd6\x24\x86\x05\xed\x57\x2a\xfd\x4c\x25\x86\x11\x2a\x1a\x38\xce\x93\xbc\x50\x77\x96\xe5\xf9\x38\xa2\xc1\xa0\xde\xd8\xb8\x0e\xd7\x6c\xfb\xee\xf6\x72\x49\xf7\xe0\xd8\xb8\x6f\x0f\x1a\x3c\xf4\xbf\x68\xa8\xbf\x3e\xb8\x8a\xc3\xcb\x70\xe4\xa8\x1a\x3b\xa9\xb6\x05\xbc\xfe\x60\x56\x2c\x89\xe1\x91\xd6\xaf\xa7\x30\x7c\x4d\xa1\x33\xda\x38\x8b\x15\x5d\x9f\xdd\x8b\x6d\x1d\x94\x3f\x29\x35\xfd\xf5\xfa\x3a\x1e\xf0\xbd\xb7\x82\x93\x2e\x05\x1d\xda\xc2\x1a\xeb\xb7\xd5\x91\xa9\x05\x55\x86\x31\xda\x6a\x6f\x99\xa5\x64\x5a\x1b\x7e\x72\x97\xc6\x91\x1d\x36\x54\xc0\x8a\xd5\xcf\x69\x3a\xff\x18\xbe\xdc\xbc\x1e\xce\x2f\xde\xa6\x8d\xac\x7f\xf9\xae\x73\x8f\xdd\x91\x3e\xd2\xda\x55\x4a\x5a\x2b\x75\x73\xfa\x14\x0d\x3d\xde\x5d\xd3\xee\xee\x07\xb4\x0b\xad\x7c\x46\xd6\x52\x37\xff\x90\x52\x66\x7d\xe6\xb1\x87\xfc\x21\xbf\xb2\x67\x63\x18\x29\x8a\xb1\x4b\xd2\x4f\x1f\x7f\x1b\x47\x31\xe4\x1b\x52\xe5\x79\x1e\x0e\x7c\x3a\x1c\xf8\x3f\xee\xb8\x92\x3c\xcf\x8f\x8c\x72\x9e\x73\xbf\x7f\x7f\xff\xf9\xf8\xfb\x0f\x6a\x64\xd1\x12\xa7\x5f\x6c\x73\x29\x0f\x93\xa5\xf0\x64\xc4\xff\x9e\xd8\x22\x57\x6d\x47\xfa\xca\xd3\xf1\x5d\xf6\x5d\x92\xb2\x95\x95\x5f\xf1\xb8\xd4\xc3\x93\xd4\xeb\x19\xe2\xff\x06\x00\x00\xff\xff\x06\xec\x44\x34\xb2\x07\x00\x00"

func storyCssBytes() ([]byte, error) {
	return bindataRead(
		_storyCss,
		"story.css",
	)
}

func storyCss() (*asset, error) {
	bytes, err := storyCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "story.css", size: 1970, mode: os.FileMode(420), modTime: time.Unix(1533325117, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tocNcx = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\xc1\x8e\xd3\x30\x14\x45\xf7\xf9\x0a\x8f\xf7\xf6\x2b\x20\x10\x44\x6e\x16\x34\xb3\xa8\x04\x9d\x4a\xb4\x0b\x96\x4e\xfc\x48\xac\x49\xec\x2a\x79\x9e\xa4\x58\xfe\x77\xe4\x0e\x42\x48\x2c\xca\xd2\xd7\xe7\xfa\x1e\x59\x3d\xd4\x4f\xbb\xd3\xf7\xe3\x23\x73\xed\xca\x8e\xe7\xcf\x5f\xf6\x3b\xc6\x05\xc0\x61\xff\xed\x09\xa0\x3e\xd5\xb7\x8b\xb7\x9b\xcd\x7b\xf1\x06\xe0\xf1\xc0\x0b\xc6\x7b\xa2\x4b\x09\xb0\x2c\x8b\x34\xda\xce\x57\xe9\xa7\x0e\x7e\xbe\xfb\xf4\xf1\x03\x64\x10\x5c\xbb\x8a\xd7\x86\x34\x64\x78\x55\xa8\x07\x21\x18\x5e\x42\xc3\x7e\xd8\x01\x59\x87\x0e\x27\x4d\x68\x58\x73\x65\xf9\xb1\xb9\x04\xe8\x2c\xf5\xa1\x91\xad\x1f\x61\xb2\xcf\xd6\x75\xb0\xf4\x9a\x70\xc0\xab\xc0\xc6\xfb\xe7\x99\x79\xc7\x62\x94\xb5\x26\x4c\x29\x37\x63\x94\xe7\x19\x27\xa7\xc7\x1c\x08\x51\x15\x2a\xbb\xae\xe3\xe0\xe6\xed\xff\x48\x02\x67\x2f\x38\xcd\xd6\xbb\x2d\x7f\xf5\xcd\xae\x3d\x6a\x53\x15\x6a\x44\xd2\xac\xf5\x8e\xd0\xd1\x96\x87\xc9\x95\x21\x58\x53\xe6\xd1\xf3\xbe\x4e\x89\xb3\x3c\xbc\xe5\x86\x9a\x32\x58\xc3\xe1\x9f\xce\xe6\x6f\xc4\xe0\x85\xfa\x7b\x10\x79\xd2\xc3\x51\x77\xb8\xf3\xc1\xd1\x3d\x7a\xd4\x6b\x66\x0f\x61\x6c\x70\xe2\x50\x29\xf8\xad\x6e\x7c\x7b\xb2\x34\x60\xa5\x08\x57\xaa\x62\x94\xb7\x63\x4a\x0a\x6e\x81\x82\x3f\x44\x11\xa3\x3c\xe8\x97\xaf\xfa\x92\x52\xa1\xf2\xa7\x54\xc5\xaf\x00\x00\x00\xff\xff\x4f\xe8\xb0\x8c\x14\x02\x00\x00"

func tocNcxBytes() ([]byte, error) {
	return bindataRead(
		_tocNcx,
		"toc.ncx",
	)
}

func tocNcx() (*asset, error) {
	bytes, err := tocNcxBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "toc.ncx", size: 532, mode: os.FileMode(420), modTime: time.Unix(1533332351, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"content.opf": contentOpf,
	"about.html": aboutHtml,
	"cover.html": coverHtml,
	"part.html": partHtml,
	"story.css": storyCss,
	"toc.ncx": tocNcx,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"about.html": &bintree{aboutHtml, map[string]*bintree{}},
	"content.opf": &bintree{contentOpf, map[string]*bintree{}},
	"cover.html": &bintree{coverHtml, map[string]*bintree{}},
	"part.html": &bintree{partHtml, map[string]*bintree{}},
	"story.css": &bintree{storyCss, map[string]*bintree{}},
	"toc.ncx": &bintree{tocNcx, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

