// Code generated by go-bindata.
// sources:
// story.css
// DO NOT EDIT!

package ebooks

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _storyCss = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x56\x5d\x4f\xdb\x30\x14\x7d\xef\xaf\xb0\x40\x93\x36\x89\x86\xb4\x1d\x05\xc2\x23\x53\x27\x1e\x60\x7b\x98\x34\xed\xd1\x71\x9c\xc4\xc3\xb5\x2d\xc7\x5d\xe9\x10\xff\x7d\x37\xfe\x68\x1d\x9a\x74\x94\xbc\x54\xb9\xc7\xbe\x9f\xe7\x9e\x54\xa1\xe7\x11\x82\xc7\xd0\x27\x33\x66\xa2\xa0\xc2\x64\x28\xb9\x60\xe2\x66\xf4\x32\x4a\x7e\xd2\x1c\x6b\xc3\x08\xa7\xfe\x18\x91\x5c\xea\x0c\x9d\x2e\xec\x73\x63\x6d\x39\x26\x8f\x95\x96\x2b\x51\x8c\x03\x9c\xa6\xf3\x79\x9a\x3a\x78\x89\x75\xc5\xc4\xd8\x48\x95\x21\xbc\x32\xb2\x63\xd5\xac\xaa\x21\xe0\xd5\x87\x8e\x95\xd3\x32\x32\xe6\x52\x17\x14\xbc\x9a\x9a\x09\xd4\x48\xce\x0a\x74\x7a\x6d\x9f\x36\xc7\x51\xc2\x37\x9a\x91\xc6\x27\xd8\xf1\x90\xba\x42\xf6\xe3\x45\x40\xa7\xf0\x34\xb2\x61\xce\x2a\x91\xa1\xd6\x93\x8b\x93\xb3\xbf\x04\xeb\xc2\x07\x2a\xa5\x30\xe3\xc6\x6c\x38\xcd\x10\x33\x70\x98\x0c\x76\x23\x6e\x56\xec\x9a\x40\x4c\xaa\x9d\xfd\x0f\x6d\xfb\x8c\x79\xc0\x72\xdc\x50\xce\x04\x8d\xb3\xcf\xd0\x85\x7a\x72\x06\x85\x8b\x82\x89\x2a\xb2\xd4\xd4\x95\x36\x0d\x85\xad\x59\x61\xea\x0c\xcd\xc2\x7b\x68\xe3\x44\x3d\x85\x2e\x2e\x16\x69\x1a\xc6\x14\xe5\xad\x64\xc3\x0c\x93\xaf\x32\x04\x12\x60\xb8\x9e\x4b\x53\x3b\x43\xc9\x25\x86\x80\x42\xb6\x59\x02\x59\xbe\xdf\x36\x44\x53\x2a\xe2\x06\x95\x78\xc9\xf8\x26\x43\x27\xb7\x72\xa5\x19\xd5\xe8\x81\xae\x4f\xce\x90\x7f\x3b\x43\x4b\x29\x64\xa3\x30\xf1\x75\xbe\x99\x5e\xbb\xbc\x7d\x99\x57\x69\x1f\x85\x76\x63\x76\xd5\xb7\x2c\x1c\xfb\x1b\x93\xd0\x39\x0f\x59\x6a\x0c\x81\x50\xb5\x91\xcb\x21\xb4\x0d\x36\x84\xb5\x11\xe3\xb2\xb6\xfd\x8e\xa3\x1e\x38\xe0\x23\x1f\x38\x61\xa3\xf7\xe1\x96\x6b\x05\x25\x52\x63\x37\xce\xed\xa8\x1e\xa8\xf1\x53\xea\xe9\xee\x6c\x96\xa6\xdb\xe6\x7b\xd2\x4c\x81\x34\x85\x5c\xe5\x20\x04\xa7\x2d\x1a\xf0\xd7\x03\x03\xdf\x0b\xa6\xe9\x5a\xea\xc7\x66\x3f\x02\x5b\xe2\x0a\xd6\x65\xa5\xf9\xc7\xd2\x9f\x9a\x5e\x26\x15\x2b\x3f\xfd\x97\x83\x5b\x2a\xb6\x9b\x58\x53\xa0\x3f\xd8\x9e\x07\x57\xca\xd6\xb8\x6e\x08\x67\x4a\xc1\x9e\x74\xc5\xc1\x8b\xc0\xac\x8f\x31\xb3\x37\x88\x8e\x55\x46\xac\x05\x38\xfe\x45\x39\x97\xeb\x1e\x71\xec\x59\xab\x1d\xec\xd8\x0b\x5e\xea\x50\x43\xd8\xde\xc9\x76\x9f\x77\x17\xe1\x4a\x59\x96\xb6\x6b\xb5\x9e\xd8\x76\xc1\x24\xc7\x9a\x2a\x8a\x0d\x82\x9d\x93\x9c\xc7\x85\x83\xd3\xad\xdf\x82\x35\x8a\xe3\x4d\x34\x7a\x70\x11\x06\x13\x13\x2c\xd6\x85\x9c\x43\xec\x83\xdb\x75\x50\xcc\x2f\x93\xeb\xee\xe9\x10\x61\xef\x82\x6b\xb9\x3b\xef\x72\x9b\x1e\x9f\xdb\xf4\x98\xdc\x3e\xa7\x47\xa5\x66\x8f\xb7\x99\xdd\xdf\x7d\xf1\x99\x05\x59\x4d\x15\xe9\x91\xc1\x48\x28\x77\x86\x48\x09\xfc\x07\xc3\xd6\xd2\xa3\x03\x83\xb0\x57\x81\x41\xdc\x6a\xc0\x20\x1a\x6b\x50\xac\x9d\xbd\x1a\xd4\x73\xe0\x95\x06\xf5\x9c\xe8\x68\x50\xc0\x5f\x46\xf7\xbb\xbe\xbd\xe7\x73\xd0\xb3\x3c\xf3\x79\xf4\x65\xe8\xd9\xd1\x80\xc3\xcc\x7e\x7c\x7b\xf8\x7a\x50\x83\x92\xe4\xfc\xae\x7d\x6b\xce\x15\x56\x54\x27\xbf\x55\xb5\x2f\x44\x6e\xcd\x32\xe4\x7e\xad\x63\x85\x35\xa9\x97\xb0\x70\xef\xf0\x0e\xd7\xb5\x62\xc4\xac\x74\xf8\x4b\xe5\xf9\x63\x87\xd0\xe2\xff\x02\x00\x00\xff\xff\xd3\xd7\x3f\x99\x92\x09\x00\x00"

func storyCssBytes() ([]byte, error) {
	return bindataRead(
		_storyCss,
		"story.css",
	)
}

func storyCss() (*asset, error) {
	bytes, err := storyCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "story.css", size: 2450, mode: os.FileMode(436), modTime: time.Unix(1466097695, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"story.css": storyCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"story.css": &bintree{storyCss, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
